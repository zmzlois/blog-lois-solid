{
  "resolvedId": "/Users/lois/Documents/GitHub/blog-lois-solid/node_modules/.pnpm/solid-start@0.2.26_@solidjs+meta@0.28.2_@solidjs+router@0.8.2_solid-js@1.7.2_solid-start-node@0.2.19_vite@4.1.4/node_modules/solid-start/islands/router.ts?v=46ce04b0",
  "transforms": [
    {
      "name": "__load__",
      "result": "import type { Location, Navigator } from \"@solidjs/router\";\nimport { createSignal } from \"solid-js\";\ninterface LocationEntry {\n  path: string;\n  state: any;\n  pathname: string;\n  search: string;\n  hash: string;\n}\n\nexport default function mountRouter() {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    _$DEBUG(\"mounting islands router\");\n\n    const basePath = \"/\";\n    let [currentLocation, setCurrentLocation] = createSignal<Location>(getLocation());\n    window.LOCATION = currentLocation;\n\n    function getLocation(): Location & LocationEntry {\n      const { pathname, search, hash } = window.location;\n      return {\n        path: pathname + search + hash,\n        state: history.state,\n        pathname,\n        search,\n        hash,\n        query: {},\n        key: \"\"\n      };\n    }\n\n    async function handleAnchorClick(evt: MouseEvent) {\n      if (\n        evt.defaultPrevented ||\n        evt.button !== 0 ||\n        evt.metaKey ||\n        evt.altKey ||\n        evt.ctrlKey ||\n        evt.shiftKey\n      )\n        return;\n\n      const a = evt\n        .composedPath()\n        .find(el => el instanceof Node && el.nodeName.toUpperCase() === \"A\") as\n        | HTMLAnchorElement\n        | undefined;\n\n      if (!a || !a.hasAttribute(\"link\")) return;\n\n      const href = a.href;\n      const target = a.target;\n      if (target || (!href && !a.hasAttribute(\"state\"))) return;\n\n      const rel = (a.getAttribute(\"rel\") || \"\").split(/\\s+/);\n      if (a.hasAttribute(\"download\") || (rel && rel.includes(\"external\"))) return;\n\n      const url = new URL(href);\n      if (\n        url.origin !== window.location.origin ||\n        (basePath && url.pathname && !url.pathname.toLowerCase().startsWith(basePath.toLowerCase()))\n      )\n        return;\n\n      const prevLocation = getLocation();\n\n      const to = url.pathname + url.search + url.hash;\n      const state = a.getAttribute(\"state\");\n\n      if (url.pathname === prevLocation.pathname && url.search === prevLocation.search) {\n        if (url.hash !== prevLocation.hash) {\n          window.location.hash = url.hash;\n          setCurrentLocation(getLocation());\n        }\n      }\n\n      evt.preventDefault();\n\n      const options = {\n        resolve: false,\n        replace: a.hasAttribute(\"replace\"),\n        scroll: !a.hasAttribute(\"noscroll\"),\n        state: state && JSON.parse(state)\n      };\n\n      if (await navigate(to)) {\n        if (options.replace) {\n          history.replaceState(options.state, \"\", to);\n        } else {\n          history.pushState(options.state, \"\", to);\n        }\n        setCurrentLocation(getLocation());\n      }\n    }\n\n    interface NavigateOptions {\n      resolve?: boolean;\n      replace?: boolean;\n      scroll?: boolean;\n      state?: any;\n    }\n\n    async function handlePopState(evt: PopStateEvent) {\n      const { pathname, state } = getLocation();\n      if (currentLocation().pathname !== pathname) {\n        if (await navigate(pathname)) {\n          setCurrentLocation(getLocation());\n        }\n      }\n    }\n\n    async function navigate(to: string, options: NavigateOptions = {}) {\n      const response = await fetch(to, {\n        method: \"POST\",\n        headers: {\n          \"x-solid-referrer\": currentLocation().pathname\n        }\n      });\n\n      if (!response.ok) {\n        console.error(`Navigation failed: ${response.status} ${response.statusText}`);\n        return false;\n      }\n\n      const body = await response.text();\n      const splitIndex = body.indexOf(\"=\");\n      const meta = body.substring(0, splitIndex);\n      const content = body.substring(splitIndex + 1);\n\n      if (meta) {\n        const [prev, next] = meta.split(\":\");\n        const outletEl = document.getElementById(prev);\n        if (outletEl) {\n          outletEl.innerHTML = content;\n          outletEl.id = next;\n          window._$HY && window._$HY.hydrateIslands && window._$HY.hydrateIslands();\n          return true;\n        } else {\n          console.warn(`No outlet element with id ${prev}`);\n        }\n      } else {\n        console.warn(`No meta data in response`);\n      }\n\n      return false;\n    }\n\n    window.NAVIGATE = navigate as unknown as Navigator;\n\n    document.addEventListener(\"click\", handleAnchorClick);\n    window.addEventListener(\"popstate\", handlePopState);\n    _$DEBUG(\"mounted islands router\");\n  }\n}\n",
      "start": 1686078494396,
      "end": 1686078494396
    },
    {
      "name": "vite:esbuild",
      "result": "import { createSignal } from \"solid-js\";\nexport default function mountRouter() {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    let getLocation = function() {\n      const { pathname, search, hash } = window.location;\n      return {\n        path: pathname + search + hash,\n        state: history.state,\n        pathname,\n        search,\n        hash,\n        query: {},\n        key: \"\"\n      };\n    };\n    _$DEBUG(\"mounting islands router\");\n    const basePath = \"/\";\n    let [currentLocation, setCurrentLocation] = createSignal(getLocation());\n    window.LOCATION = currentLocation;\n    async function handleAnchorClick(evt) {\n      if (evt.defaultPrevented || evt.button !== 0 || evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey)\n        return;\n      const a = evt.composedPath().find((el) => el instanceof Node && el.nodeName.toUpperCase() === \"A\");\n      if (!a || !a.hasAttribute(\"link\"))\n        return;\n      const href = a.href;\n      const target = a.target;\n      if (target || !href && !a.hasAttribute(\"state\"))\n        return;\n      const rel = (a.getAttribute(\"rel\") || \"\").split(/\\s+/);\n      if (a.hasAttribute(\"download\") || rel && rel.includes(\"external\"))\n        return;\n      const url = new URL(href);\n      if (url.origin !== window.location.origin || basePath && url.pathname && !url.pathname.toLowerCase().startsWith(basePath.toLowerCase()))\n        return;\n      const prevLocation = getLocation();\n      const to = url.pathname + url.search + url.hash;\n      const state = a.getAttribute(\"state\");\n      if (url.pathname === prevLocation.pathname && url.search === prevLocation.search) {\n        if (url.hash !== prevLocation.hash) {\n          window.location.hash = url.hash;\n          setCurrentLocation(getLocation());\n        }\n      }\n      evt.preventDefault();\n      const options = {\n        resolve: false,\n        replace: a.hasAttribute(\"replace\"),\n        scroll: !a.hasAttribute(\"noscroll\"),\n        state: state && JSON.parse(state)\n      };\n      if (await navigate(to)) {\n        if (options.replace) {\n          history.replaceState(options.state, \"\", to);\n        } else {\n          history.pushState(options.state, \"\", to);\n        }\n        setCurrentLocation(getLocation());\n      }\n    }\n    async function handlePopState(evt) {\n      const { pathname, state } = getLocation();\n      if (currentLocation().pathname !== pathname) {\n        if (await navigate(pathname)) {\n          setCurrentLocation(getLocation());\n        }\n      }\n    }\n    async function navigate(to, options = {}) {\n      const response = await fetch(to, {\n        method: \"POST\",\n        headers: {\n          \"x-solid-referrer\": currentLocation().pathname\n        }\n      });\n      if (!response.ok) {\n        console.error(`Navigation failed: ${response.status} ${response.statusText}`);\n        return false;\n      }\n      const body = await response.text();\n      const splitIndex = body.indexOf(\"=\");\n      const meta = body.substring(0, splitIndex);\n      const content = body.substring(splitIndex + 1);\n      if (meta) {\n        const [prev, next] = meta.split(\":\");\n        const outletEl = document.getElementById(prev);\n        if (outletEl) {\n          outletEl.innerHTML = content;\n          outletEl.id = next;\n          window._$HY && window._$HY.hydrateIslands && window._$HY.hydrateIslands();\n          return true;\n        } else {\n          console.warn(`No outlet element with id ${prev}`);\n        }\n      } else {\n        console.warn(`No meta data in response`);\n      }\n      return false;\n    }\n    window.NAVIGATE = navigate;\n    document.addEventListener(\"click\", handleAnchorClick);\n    window.addEventListener(\"popstate\", handlePopState);\n    _$DEBUG(\"mounted islands router\");\n  }\n}\n",
      "start": 1686078494396,
      "end": 1686078494460,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":false};import.meta.env.START_SSR = true;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"/Users/lois/Documents/GitHub/blog-lois-solid/src/entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"/Users/lois/Documents/GitHub/blog-lois-solid/src/entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"solid-start-node\";import { createSignal } from \"/node_modules/.vite/deps/solid-js.js?v=0b6b363b\";\nexport default function mountRouter() {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    let getLocation = function() {\n      const { pathname, search, hash } = window.location;\n      return {\n        path: pathname + search + hash,\n        state: history.state,\n        pathname,\n        search,\n        hash,\n        query: {},\n        key: \"\"\n      };\n    };\n    _$DEBUG(\"mounting islands router\");\n    const basePath = \"/\";\n    let [currentLocation, setCurrentLocation] = createSignal(getLocation());\n    window.LOCATION = currentLocation;\n    async function handleAnchorClick(evt) {\n      if (evt.defaultPrevented || evt.button !== 0 || evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey)\n        return;\n      const a = evt.composedPath().find((el) => el instanceof Node && el.nodeName.toUpperCase() === \"A\");\n      if (!a || !a.hasAttribute(\"link\"))\n        return;\n      const href = a.href;\n      const target = a.target;\n      if (target || !href && !a.hasAttribute(\"state\"))\n        return;\n      const rel = (a.getAttribute(\"rel\") || \"\").split(/\\s+/);\n      if (a.hasAttribute(\"download\") || rel && rel.includes(\"external\"))\n        return;\n      const url = new URL(href);\n      if (url.origin !== window.location.origin || basePath && url.pathname && !url.pathname.toLowerCase().startsWith(basePath.toLowerCase()))\n        return;\n      const prevLocation = getLocation();\n      const to = url.pathname + url.search + url.hash;\n      const state = a.getAttribute(\"state\");\n      if (url.pathname === prevLocation.pathname && url.search === prevLocation.search) {\n        if (url.hash !== prevLocation.hash) {\n          window.location.hash = url.hash;\n          setCurrentLocation(getLocation());\n        }\n      }\n      evt.preventDefault();\n      const options = {\n        resolve: false,\n        replace: a.hasAttribute(\"replace\"),\n        scroll: !a.hasAttribute(\"noscroll\"),\n        state: state && JSON.parse(state)\n      };\n      if (await navigate(to)) {\n        if (options.replace) {\n          history.replaceState(options.state, \"\", to);\n        } else {\n          history.pushState(options.state, \"\", to);\n        }\n        setCurrentLocation(getLocation());\n      }\n    }\n    async function handlePopState(evt) {\n      const { pathname, state } = getLocation();\n      if (currentLocation().pathname !== pathname) {\n        if (await navigate(pathname)) {\n          setCurrentLocation(getLocation());\n        }\n      }\n    }\n    async function navigate(to, options = {}) {\n      const response = await fetch(to, {\n        method: \"POST\",\n        headers: {\n          \"x-solid-referrer\": currentLocation().pathname\n        }\n      });\n      if (!response.ok) {\n        console.error(`Navigation failed: ${response.status} ${response.statusText}`);\n        return false;\n      }\n      const body = await response.text();\n      const splitIndex = body.indexOf(\"=\");\n      const meta = body.substring(0, splitIndex);\n      const content = body.substring(splitIndex + 1);\n      if (meta) {\n        const [prev, next] = meta.split(\":\");\n        const outletEl = document.getElementById(prev);\n        if (outletEl) {\n          outletEl.innerHTML = content;\n          outletEl.id = next;\n          window._$HY && window._$HY.hydrateIslands && window._$HY.hydrateIslands();\n          return true;\n        } else {\n          console.warn(`No outlet element with id ${prev}`);\n        }\n      } else {\n        console.warn(`No meta data in response`);\n      }\n      return false;\n    }\n    window.NAVIGATE = navigate;\n    document.addEventListener(\"click\", handleAnchorClick);\n    window.addEventListener(\"popstate\", handlePopState);\n    _$DEBUG(\"mounted islands router\");\n  }\n}\n",
      "start": 1686078494460,
      "end": 1686078494461,
      "order": "normal"
    }
  ]
}
